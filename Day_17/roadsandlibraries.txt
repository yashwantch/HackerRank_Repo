import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {
    
    private static int V;   
  
   
    private static  LinkedList<Integer> adj[]; 

    // Complete the roadsAndLibraries function below.
    static long roadsAndLibraries(int n, long c_lib, long c_road, int[][] cities) {
        
        long result = 0;
        if(c_lib <= c_road) {
            result = c_lib * n;
        }else {
            graph(n);
            
            for(int i = 0 ; i < cities.length ; i++) {
                int city1 = cities[i][0];
                int city2 = cities[i][1];    
                addEdge(city1 , city2);    
            }
             boolean visited[] = new boolean [n+1];
            int components = 0;
            for (int i = 1; i <= n ; i++) {
            if (!visited[i]) {
                DFSUtil(i, visited);
                components++;
            }
        }
        result = c_road * (n - components) + c_lib * components;

            
        }


        return result;
    }
    
   public static void DFSUtil(int v,boolean visited[]) 
    { 
        // Mark the current node as visited and print it 
        visited[v] = true; 
  
        // Recur for all the vertices adjacent to this vertex 
        Iterator<Integer> i = adj[v].listIterator(); 
        while (i.hasNext()) 
        { 
            int n = i.next(); 
            if (!visited[n]) 
                DFSUtil(n, visited); 
        } 
    } 
    
    public static  void graph(int v) 
    { 
        V = v; 
        adj = new LinkedList[v+1]; 
        for (int i=1; i<=V; ++i) 
            adj[i] = new LinkedList(); 
    } 
    
   public static void addEdge(int v, int w) 
    { 
        adj[v].add(w);
        adj[w].add(v);
    } 

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            String[] nmC_libC_road = scanner.nextLine().split(" ");

            int n = Integer.parseInt(nmC_libC_road[0]);

            int m = Integer.parseInt(nmC_libC_road[1]);

            long c_lib = Integer.parseInt(nmC_libC_road[2]);

            long c_road = Integer.parseInt(nmC_libC_road[3]);

            int[][] cities = new int[m][2];

            for (int i = 0; i < m; i++) {
                String[] citiesRowItems = scanner.nextLine().split(" ");
                scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

                for (int j = 0; j < 2; j++) {
                    int citiesItem = Integer.parseInt(citiesRowItems[j]);
                    cities[i][j] = citiesItem;
                }
            }

            long result = roadsAndLibraries(n, c_lib, c_road, cities);

            bufferedWriter.write(String.valueOf(result));
            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
