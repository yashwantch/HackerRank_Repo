import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

/*public class Solution {

    public static void main(String[] args) {
  
        
        Scanner sc = new Scanner(System.in);
        int noOfInputs = sc.nextInt();
        String[] input = new String[noOfInputs];
        String s = "";
        int flag = 0;
        for(int i = 0 ; i < noOfInputs ; i++) {
            input[i] = sc.next();    
        }
        
    schiffe_loop:
        for(int i = 0 ; i < noOfInputs ; i++) {
            for(int j = 1 ; j < noOfInputs ; j++) {
                
                if(input[j].contains(input[i])) {
                    flag = 0;
                    s = input[j];
                    break schiffe_loop;
                }else {
                    flag = 1;
                }
            }
        }
        if(flag == 1) {
            System.out.println("GOOD SET");
        }else {
            System.out.println("BAD SET");
            System.out.println(s);
        }
        
    }
}*/
    public class Solution {


    static class Node {
        char data;
        Map<Character, Node> next = new HashMap<>();
    }
    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);


        Node root = new Node();
        root.data = '\0';
        int n = s.nextInt();
        boolean badSet = false;
        for (int i = 0 ;i < n; i++) {
            String str = s.next();
            if (isPrefix(str, root)) {
                System.out.println("BAD SET") ;
                System.out.println(str);
                badSet = true;
                break;
            }
        }
        if (!badSet)
            System.out.println("GOOD SET");


    }
    private static boolean isPrefix (String str, Node root){
        Node current  = root;
        boolean isPrefix = false;
        for (int i = 0; i< str.length(); i++) {
            char c = str.charAt(i);
            if (current.next.containsKey(c)) {
                current = current.next.get(c);
                if (isLeaf(current)) return true; //stumbled on a previous prefix
                if (i == str.length() -1) return true;  //found identical string
            }else {//paving a new path
                Node newNode = new Node();
                newNode.data  =c;
                current.next.put(c, newNode);
                current = newNode;
            }
        }
        return isPrefix;
    }

    private static boolean isLeaf(Node n) {
        return (n.data!='\0' && n.next.isEmpty());
    }
}
    
    
    