import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Solution {
    private static String s;



    public static long calc(int[] palindrome) {
        long res = 0L;
        for (int i = palindrome[0]; i < palindrome[1]; i++) {
            res *= 100001L;
            res += s.charAt(i);
            res %= 1000000007L;
        }
        return res;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        int n = in.nextInt();
        int q = in.nextInt();
        in.nextLine();

        s = in.next();

        int count = 0;
        int[] d1 = new int[n];

        int l = 0, r = -1;
        for (int i = 0; i < n; i++) {
            int k = i > r ? 1 : Math.min(d1[l + r - i], r - i);
            while (0 <= i - k && i + k < n && s.charAt(i - k) == s.charAt(i + k))
                k++;
            d1[i] = k;
            count += k;
            if (i + k - 1 > r) {
                r = i + k - 1;
                l = i - k + 1;
            }
        }

        int[] d2 = new int[n];
        l = 0;
        r = -1;

        for (int i = 0; i < n; i++) {
            int k = i > r ? 0 : Math.min(d2[l + r - i + 1], r - i + 1);
            while (i + k < n && i - k - 1 >= 0 && s.charAt(i + k) == s.charAt(i - k - 1))
                k++;
            count += k;
            d2[i] = k;
            if (i + k - 1 > r) {
                l = i - k;
                r = i + k - 1;
            }
        }

        int[][] p = new int[count][];
        int k = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 1; j <= d1[i]; j++) {
                p[k] = new int[] {i - j + 1, i + j};
                k++;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 1; j <= d2[i]; j++) {
                p[k] = new int[] {i - j, i + j};
                k++;
            }
        }

        Arrays.sort(p, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                int len1 = o1[1] - o1[0];
                int len2 = o2[1] - o2[0];

                for (int i = 0; i < Math.min(len1, len2); i++) {
                    char c1 = s.charAt(o1[0] + i);
                    char c2 = s.charAt(o2[0] + i);

                    if (c1 != c2) {
                        return c1 - c2;
                    }
                }

                return len1 - len2;
            }
        });

        for (int i = 0; i < q; i++) {
            long query = in.nextLong() - 1;
            if (query < p.length) {
                System.out.println(calc(p[(int)query]));
            } else {
                System.out.println(-1);
            }
        }

    }
}